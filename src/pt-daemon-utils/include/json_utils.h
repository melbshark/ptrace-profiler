////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __JSON_COMMON_H__
#define __JSON_COMMON_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "common.h"

#include <jansson/jansson.h>

#include <string>

#include <stdint.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class JsonNode
{
public:

  JsonNode () : m_node (NULL), m_shouldDeref (false) { }

  ~JsonNode ();

  bool IsValid () const { return (m_node != NULL); }

  bool IsArray () const { return IsValid () && json_is_array (m_node); }

  bool IsObject () const { return IsValid () && json_is_object (m_node); }

  bool IsString () const { return IsValid () && json_is_string (m_node); }

  bool IsNumber () const { return IsValid () && json_is_number (m_node); }

  bool IsInteger () const { return IsValid () && json_is_integer (m_node); }

  bool IsDouble () const { return IsValid () && json_is_real (m_node); }

  bool IsBool () const { return IsValid () && json_is_boolean (m_node); }

  bool IsTrue () const { return IsValid () && json_is_true (m_node); }

  bool IsFalse () const { return IsValid () && json_is_false (m_node); }

  bool IsNull () const { return IsValid () && json_is_null (m_node); }

  json_t *GetImplNode () const { return m_node; }

  bool GetString (char *buffer, size_t bufferSize) const;

  bool GetString (std::string &output) const;

  bool GetInteger (int32_t &output) const;

  bool GetInteger (int64_t &output) const;

  bool GetDouble (double &output) const;

  bool GetBool (bool &output) const;

  size_t GetLength () const;

  bool TryChild (const char *key, JsonNode *child) const;

  bool TryChild (const char *path [], JsonNode *child) const;

  bool TryChildNodeAtIndex (size_t index, JsonNode *child) const;

private:

  friend class JsonUtils;

  explicit JsonNode (json_t *node) : m_node (node), m_shouldDeref (false) {}

  explicit JsonNode (json_t *node, bool shouldDeref) : m_node (node), m_shouldDeref (shouldDeref) {}

  bool TryChild (const char *path [], json_type type, JsonNode *foundNode) const;

  json_t *m_node;

  bool m_shouldDeref;

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class JsonUtils
{
public:

  static JsonNode *LoadFromFile (const char *filename);

  static JsonNode *LoadFromMemory (const char *data, size_t dataSize);

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  static bool GetChildAsString (const JsonNode &node, const char *key, char *buffer, size_t bufferSize);

  static bool GetChildAsString (const JsonNode &node, const char *key, std::string &output);

  static bool GetChildAsInteger (const JsonNode &node, const char *key, int32_t &output);

  static bool GetChildAsInteger (const JsonNode &node, const char *key, int64_t &output);

  static bool GetChildAsDouble (const JsonNode &node, const char *key, double &output);

  static bool GetChildAsBool (const JsonNode &node, const char *key, bool &output);

  static bool GetChildAsString (const JsonNode &node, const char *path [], char *buffer, size_t bufferSize);

  static bool GetChildAsString (const JsonNode &node, const char *path [], std::string &output);

  static bool GetChildAsInteger (const JsonNode &node, const char *path [], int32_t &output);

  static bool GetChildAsInteger (const JsonNode &node, const char *path [], int64_t &output);

  static bool GetChildAsDouble (const JsonNode &node, const char *path [], double &output);

  static bool GetChildAsBool (const JsonNode &node, const char *path [], bool &output);

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  static bool TryChildAsString (const JsonNode &node, const char *key, char *buffer, size_t bufferSize);

  static bool TryChildAsString (const JsonNode &node, const char *key, std::string &output);

  static bool TryChildAsInteger (const JsonNode &node, const char *key, int32_t &output);

  static bool TryChildAsInteger (const JsonNode &node, const char *key, int64_t &output);

  static bool TryChildAsDouble (const JsonNode &node, const char *key, double &output);

  static bool TryChildAsBool (const JsonNode &node, const char *key, bool &output);

  static bool TryChildAsString (const JsonNode &node, const char *path [], char *buffer, size_t bufferSize);

  static bool TryChildAsString (const JsonNode &node, const char *path [], std::string &output);

  static bool TryChildAsInteger (const JsonNode &node, const char *path [], int32_t &output);

  static bool TryChildAsInteger (const JsonNode &node, const char *path [], int64_t &output);

  static bool TryChildAsDouble (const JsonNode &node, const char *path [], double &output);

  static bool TryChildAsBool (const JsonNode &node, const char *path [], bool &output);

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __JSON_COMMON_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
